1) why Numpy ?
    a)Numpy offers a number of key features for scientific computing.The key feature of Numpy is support for multi-dimensional arrays.
    b)One of the trickier things to manage when working with matrices and vectors is making sure their dimensions align properly.
      Numpy actually takes a lot of that work out of the process by supporting something called broadcasting
      which makes the process easier and the code easier to read.
    c)Bascically The first reason we use Numpy is because it's fast.In fact, using Numpy's arrays can be 10 times faster than 
      Python's lists.To enable the speed,Numpy arrays are fixed in size unlike lists which can change in size.
      In elements and Numpy arrays must all be the same type.All ints or floats where as lists can hold any type.
      By restricting ndarrays in this way,it makes ndarrays both much more space efficient than lists, 
      but also opens up a range of memory and computational optimizations.
    d)The second reason we use Numpy is because of its functionality.
      Eg: Want to get the average of a vector I the matrix?
          You got it.
          Want to multiply matrices?
          You got it.
          Want to select a subset of the matrix based on indexes or values?
          You got it.
          Even when we move into Pandas, you'll be finding yourself using many of these functions.
    e)Lastly, we love Numpy because many of our favorite packages in Python rely on Numpy.In fact, Pandas which we'll be doing soon
      are built on top of Numpy.I should note that while Pandas provides higher level functionality than Numpy,
      you'll still be using Numpy as functionality at times.

2)Operations:
    a) creating a 1D array or vector or rank 1 array ==>an_array = np.array([3,33,333])(note that the values are given in sq.braces (we can also use curly braces))
    b) type of array is <class 'numpy.ndarray'> ==>print(type(an_array)) ==> o/p = <class 'numpy.ndarray'>(i.e it is bascically an N dimentional array(N d array)
    c) shape of array ==>print(an_array.shape) ==> o/p = (3,) (since only 1 D)
     Note that the to know thw type we gave as 'type(variablename)' but for shape we gave as variablename.shape
    d) access the elemest ==>an_array[0] ( note that we usd sq. braces to access the element)
    e)Ndarrays are mutable,which means that we can switch their elements.(eg : an_array[0] = 888 ==> now array becomes as [888 33 333]
    f)creating a rank 2 array:
        another = np.array([[11,12,13],[21,22,23]])  (we can also create an np array using curly braces like this np.array([(2,2),(3,3)]))
        print(another.shape) ==> o/p = (2, 3)
        print(another[0,0],another[0,1],another[1,0]) ==> o/p = 11 12 21
   (Question) if we gave as    np.array([[11,12,13],[21,22,23]]) ==> shape = (2,3)
      but if we gave as  np.array([[[11,12,13],[21,22,23]]]) ==> shape = (1,2,3) 
      what does (1,2,3) refer to ?
    g)One of the nicest features to NumPy is the variety of library functions available to trade arrays of varying sizes
        with different pre-filled values.
       Eg: 1)np.zeros((2,2)) creates a 2x2 zero matrix( note the spelling and case of zeros fn)
           2)np.full((2,2),9) if I want an array to be pre-filled with the same value ==> we will have a 2x2 matrix with all values as 9
           3)np.eye(2,2) creates a 2x2 identity matrix ( note that we dont have more braces in fn)
            (if we use np.eye(2,3) ==> we will get 2x3 matrix where sub matrix (2x2) is an identity matrix)
            Therefore bascically eye() makes all the diagonal elements as 1 and others as zeros)
           4)no.ones((1,2)) ==> will create a matrix with all values as 1
           *(There is a trick in this i.e this is a 2x2 matrix even though we gave 1x2 matrix ==> therefore check the shape of the matrix before accessing it) 
           5)np.random.random((2,2)) ==> creates a 2x2 matrix of random floats b/w 0 and 1
           (This is particularly useful for algorithms which you need to random state in order to get kick started.)

3)Array indexing and slicing:
        **1)use slice indexing to access subsets of an ndarray,and recognize that using such indexing creates 
            a second reference to the same underlying data.(i.e if we change the the element in slice ==> it will reflect in the original data structure as well)
          2)Say we have a 3x4 matrix(an_array=np.array([[11,12,13,14],[21,22,23,24],[31,32,33,34]])) ==>slice1 = an_array[:2,1:3] ==> we get a 2x2 matrix( which just the reference of same data with indexex f its own)
          i.e [:2,1:3] means take all the rows before row no. 2 i.e rows 0 to 2(excluding 2nd index row) and take columns 1 to 3 (excluding 3rd index column)
                (row range,column range)
        **3) If we want to make sure that the changes ih the slice of the original doesnt effect the original data structure
          ==> we need to take the copy of the slice instead of the slice
          i.e slice1 = np.arrar(an_array[:2,1:3])
        **4)Using both integer indexing and slicing gives us a lower rank matrix/array
            Eg:row_rank1 = an_array[1, :] ==>o/p = [21 22 23 24] ==> now check shape of row_rank1 ==> we get shape/rank = (4,) i.e is a rank 1 array/matrix
            (i.e  just a single index,for the row and a slice for the column.By putting a colon, it means all columns.So here I'm asking for all columns of row one)
            Because I've used a single index to access the row,I actually get back a Rank 1 array,which I could index with a single number.Using the single index is a special case because if I use slices to produce a one by four array,it will still be Rank 2, let's do that.
            Eg: generating using slicing alone
                    ==>row_rank2 = an_array[1:2,:] ==>o/p = [[21 22 23 24]] ==> now check shape of row_rank2 ==> we get shape/rank = (1,4) i.e is a rank 1 array/matrix
                                                        (note that we have 2 sq braces in the o/p matrix created)
            lly do gfor columns and try i.e [:,1] and [:, 1:2]
  
4) using arrays of indexes to change/ermute elements:
        a)create an array say an_array=np.array([[11,12,13,14],[21,22,23,24],[31,32,33,34]])
        b)create an array of indices  say col_indices = np.array ([0,1,2,0]) and row_indices= np.arrange(4)
                                          print(col_indices) ==> o/p = [ 0 1 2 0 ] and print(row_indices) ==> o/p = [ 0 1 2 3 ]
        c) ==> we can use an_array[row_indices,col_indices]
        we can use it to select/chnage/modify one elemnt from each row,column,etc
 
  Note:Keep this trick in mind for later in the course when we start doing Data Cleaning.
       Slice and Array Indexing is at the heart of NumPy

5)ndarray boolean indexing :(also called as conditional indexing)
        a)#create a 3x2 matrix ==> >>> an_array= np.array([[11,12],[21,22],[31,32]])
          #creating a filter which will be a boolean based on the condition
          ==> >>> filter = (an_array > 15)
          ==> >>> filter
          #use the filter to get all the values greater than 15
          ==> >>> print(an_array[filter]) #this will rturn the values which are true(make sure to use sq. braces else error)
          #this can be done in one step as well,like this
          ==> >>> an_array[an_array > 15]
        b)We can have even more complex logic here.Let's try to get all the values between 20 and 30.
          >>> an_array[(an_array > 20) & (an_array < 30)]
        c)Or, we can even ask for even values just using the modulo symbol.
          >>> an_array[an_array % 2 ==0]
        d)Let's use that same conditional,but now, let's actually change the elements based on the condition.(adding 100 to even elements)
          >>> an_array[an_array % 2 ==0] +=100
          >>> print(an_array)
        e)Filters are useful in many Data Science operations and other Computer Science algorithms involving matrices.
          For example, green screening of images takes advantage of filter functions to replace green pixels in the background
          with another image of your choice.
          
6)ndarray Datatypes and Operations: 
        a)As you may expect from our introductory video on Numpy,each ndarray has its own datatype.     
        b)>>>ex1 = np.array([11,12]) #python assigns the data type
          >>>print(ex1.dtype)   ==> o/p = int32
          >>>ex2 = np.array([11.0,12]) #python assigns the data type
          >>>print(ex2.dtype)   ==> o/p = float64
          >>>ex3 = np.array([11,12],dtype = np.int64) #you can also tell python the data type  
        c)this is useful if we want to force a different data type in input(Eg: some fn take i/p only as integers but users give floats as well ==> use this)
          >>>ex4 = np.array([11.1,12.7],dtype = np.int64)
          >>>print(ex4.dtype)
          >>>print() #prints space
          >>>print(ex4)
          i.e Here, I'm providing two floats to the constructor,and I'm telling it to make the type integer.Numpy will do this,it just forces the floats to drop their decimal,effectively doing the floor function.

        d)arithmatic operations
            x = np.array([[111,222],[333,444]],dtype = np.int)
            y = np.array([[111.1,222.3],[333.2,444]],dtype = np.float64)
            we can use operators or the fn to do arthimatic operations
                eg: print(x + y) lly print(x-y),print(x*y),print(x/y),
                                (OR)
                print(np.add(x,y)),print(np.subtract(x,y))print(np.multiply(x,y)),print(np.divide(x,y)),print(np.sqrt(x)),print(np.exp(x,y))(i.e E power x)
        For many of these operations to work,there needs to be an aligning of dimensions.In this case, the dimensions are the same, so we'll be fine.
        But later we'll see that there's some flexibility about this constraint, when we learn about broadcasting.

7)Statistical, Sorting, and Set Operations:  
        a)Statistics:
            Mean/average :
                      A number expressing the central or typical value in a set of data.
                     The mean is found by adding up all of the given data and dividing by the number of data entries.
            Median :The median is the middle number(the number which separates lower and higher half od a dataset).  
                    First you arrange the numbers in order from lowest to highest, then you find the middle number by crossing off the numbers until you reach the middle.
                    (if we have 2 middle numbers, then the median is the average/mean of those 2 middle numbers).
            Mode :  no. with highest frequency.
            Standard deviation(SD): is a measure of how spread out numbers are.(Deviation just means how far from the normal).
                                    The formula is easy: it is the square root of the Variance. SD is denoted by Sigma.
            Variance : is defined as The average of the squared differences from the Mean.
            
            1)create a 2x5 array with random values     >>>arr = 10 * np.random.randn(2,5)
            COMPUTE THE MEAN FOR ALL ELEMENTS'        >>>print(arr.mean())
            #we can also use mean() in numpy package  >>>print(np.mean(arr)) 
            #compute the mean by row i.e find mean of each row
                                                      >>>print(arr.mean(axis =1))
            #compute the mean by column i.e find mean of each row
                                                      >>>print(arr.mean(axis=0))
            #compute sum of all elements              >>>print(arr.sum())
            #compute median of all elements           >>>print(np.median(arr))
            #compute median fo rows                   >>>print(np.median(arr,axis = 1)) #lly use axis = 0 for columns medians
            #print(np.mode(arr)) (we need to fing how to get mode, till then we can use >>> from scipy import stats 
                                                                                        >>>stats.mode(a) #where 'a' is a Numpy array
                             
        b)Sorting:
            1)# create an array of 10 random elements
              >>>unsorted = np.random.randn(10)
              #we can sort the elements directly but sometimes, we want to avoid changing array values themselves and just get back a copy of the array, which is sorted.
              >>>sorted = np.array(unsorted)  #copy elements of one array to another Q) how to add elements from one array to another ?
              >>>sorted.sort()
              >>>print(sorted)
              >>>print(unsorted)
              Appending data to an existing array is a natural thing to want to do. However, if you find yourself regularly
              appending to large arrays, you'll quickly discover that NumPy doesn't easily or efficiently do this the way a python list 
              will. You'll find that every "append" action requires re-allocation of the array memory and short-term doubling of memory 
              requirements. So, the more general solution to the problem is to try to allocate arrays to be as large as the final output
              of your algorithm. Then perform all your operations on sub-sets (slices) of that array.Array creation and destruction 
              should ideally be minimized.That said, It's often unavoidable and the functions that do this are:
              (https://stackoverflow.com/questions/5064822/how-to-add-items-into-a-numpy-array)
              for 2-D arrays:
                np.hstack   ==> https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html 
                np.vstack  ==> https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html
                np.column_stack ==> https://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html
                 np.row_stack    ==> https://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.row_stack.html
              for 3-D arrays (the above plus):
                 np.dstack  ===>https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html
              for N-D arrays: 
                 np.concatenate ==>https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html     
            2)#use unique() to get the unique elements from an numpy array
              >>>array1 = np.array([1,2,3.21,1.,4.2,2,2,3,3,2,])
              >>>print(np.unique(array1))

        c) set Operations:
            >>>s1 = np.array(["desk","chair","bulb"])
            >>>s2 = np.array(["lamp","chair","bulb"])
            >>>print( np.intersect1d(s1,s2))    ==>o/p = ['bulb' 'chair']     
            >>>print( np.union1d(s1,s2))        ==>o/p = ['bulb' 'chair' 'desk' 'lamp']
            >>>print( np.setdiff1d(s1,s2)) # gives the element prsent in set 1 but not in set set 2    ==>o/p = ['desk']
            >>>print( np.in1d(s1,s2)) # gives the boolean values for the elements of set1 wrt to set 2 ==>o/p = [False  True  True]
            
            
8)Broadcasting:      
        a)The term broadcasting describes how numpy treats arrays with different shapes during arithmetic operations.Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C instead of Python.
        b) General broadcasting rules :When operating on two arrays, NumPy compares their shapes element-wise. It starts with the trailing dimensions, and works its way forward. Two dimensions are compatible when
                 1)they are equal, or
                 2)one of them is 1 (i.e a scalar or a 1x1 array)
           If these conditions are not met, a ValueError: frames are not aligned exception is thrown, indicating that the arrays have incompatible shapes. The size of the resulting array is the maximum size along each dimension of the input arrays.
        (OR)' ValueError: operands could not be broadcast together with shapes'  is thrown
        c)#creating a zero Array of size 4x3                    >>>start = np.zeros((4,3))
          #creating a rank 1 nd array with 3 values             >>>add_rows = np.array([1,0,4])
          #adding to each row of start using broadcasting       >>>y= start + add_rows #this addition is done using broadcasting internally and size of start is != sizeof add_rows array
          #lly creat a 4x1 ran 1 column array to add across columns of start
          #add_cols = np. array([1,2,3,4]) #this will not work we have to give one more q. bracket
                                                                >>>add_cols = np.array([[1,2,3,4]])
                                                                >>>print(add_rows)
                                                                >>>print(add_cols)
          #getting the column matrix by getting the transpose   >>>add_cols = add_cols.T 
                                                                >>>print(add_cols)
          #getting transpose using np pkg gives a diff result ==> use the above one only #>>>print(np.transpose(add_cols))      
                                                                >>>y = start + add_cols
                                                                >>>print(y)
          #add a scalar                                         >>>add_scalar = np.array([1])
                                                                >>>print(start + add_scalar)
        d)Question : does a+b1 and a+b2 result in the same matrix.
            code :  >>>a = np.array([[0,0],[0,0]])
                    >>>b1 = np.array([1,1])
                    >>>b2 = 1
          Answer : Yes
    
    9)Speed Test (ndarray vs. list)
         a)To do this test, we'll be using Time It,to measure the execution time of our code.
            Cell 1:>>>from timeit import Timer
                   >>>size = 1000000
                   >>>timeits = 1000
                   #creating an nd_array with values 0,1,2,3....upto size-1
                   >>>nd_array = np.arange(size) #we can also import just arrange from and use it like this #from numpy import arange use : >>>nd_array =arange(size)
                   >>>print(type(nd_array))
            Cell 2:#timer expexte the operation as a parameter
                   #here we pass nd_array.sum() as parameter
                   >>>timer_numpy = Timer("nd_array.sum()","from __main__ import nd_array")
                   >>>print(timer_numpy)
                   >>>print("time taken by nd_array:%f seconds" % (timer_numpy.timeit(timeits)/timeits)) o/p in milliseconds
                   >>>print("time taken by nd_array:%f seconds" % (timer_numpy.timeit(timeits)))         o/p in seconds
                   >>>print("time taken by nd_array:%f seconds" % (timer_numpy.timeit(10)))
                   #timeit() method in timeit package take parameter called to repead the code that many no.of times
            Cell 3:#create a list with values 0,1,2,3... upto siz-1
                   >>>a_list = list(range(size))
            Cell 4:>>>timer_list = Timer("sum(a_list)","from __main__ import a_list")
                   >>>print(timer_list)
                   >>>print("time taken by list:%f seconds" % (timer_list.timeit(timeits)))
          From these outputs we can conclude that Numpy arrays are way more faster than the Lists.
   10)Satellite Image Example:
        a)Each pixel is only one color, defined by a set of numbers.A simple way to describe each pixel is using a combination of three colors,
            namely red, green, and blue.This is what we call an RGB image.
        b)In an RGB image,each pixel is represented by three 8-bit numbers associated to the values for red, green, and blue respectively.
            The combination of these three will, in turn,give us a specific shade of the pixel color.
            Since each number is an 8-bit number,the values range from 0 to 255.For example, a yellow value can be identified by 255, 255, and 0 for RGB(i.e if R is 255,G is 255 and Blue is 0 ==> it is a yellow color),as we see in this diagram.If all three values are at full intensity,that means they are 255, it shows as white.If all three colors are muted,or has the value of 0, the color shows as black.
          **Since each value can have 256 different intensity or brightness value,it makes 16.8 million total shades.
            In Python, RGB images are ndarrays of shape height times width times three for each RGB layer(i.e height*width*3).
            How coloured images are stored in python :
                >>>from skimage import data
                >>>photo_data = misc.imread('./wifire/sd-3layers.jpg)
                >>>type(photo_data) ==> we get type as numpy.ndarray
            
    11)Questions: 
        a)Look at the following code:
                >>>b = np.array([1,2,3])
                >>>b[1] = 'one'
            What error prints out after you run these two lines of code?
            a)SyntaxError   b)NameError  c)KeyError     d)ValueError
        Answer: (D) i.e ValueError: invalid literal for int() with base 10: 'one'
        b) nd arrays are Mutable ==> True 
        c)Changing an element of an array slice in numpy will NOT change the original array. ==> False
        d)What is the correct way to access elements of an array “arr” that are less than 0?
            a)arr[<0]   b)arr[arr<0]     c)arr[arr[,]<0]
        Ans: (B)
        e)Select two valid ways to get the odd values of an array “arr.”
            a)arr[(arr % 2 != 1)]   b)arr[(arr % 2 != 0)]   c)arr[(arr % 2 == 1)] d)arr[(arr % 2 == 0)]
        Ans: B and C
        f)What requirement is needed to add two numeric numpy arrays?
            a)They need to have the same or compatible dimensions. correct
            b)They need to be of the same type.
            c)They need to be converted to type float first.
        And: A
        g)What command allows you to sum all of the elements in an Rank 2 ndarray called “a”?
            a)a.sum() correct   b)sum(a)    c)A+a   d)a.add() 
        Ans: A
   
   
   12)code for Satellite img processing:
   --------------------------------------
        
        
        
# coding: utf-8

# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold">Loading the libraries we need: numpy, scipy, matplotlib</p>

# In[47]:

# insert line '%matplotlib inline' to directly view the image (or) use plt.show() extra to display image in the console
import numpy as np
from scipy import misc
import matplotlib.pyplot as plt


# <p style = "color:#2462C0; font-style:bold"> Creating a Numpy array from a Image</p>

# In[32]:

from skimage import data

photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')
#print(photo_data)
type(photo_data)


# <p> lets see whats this Image is </p>

# In[48]:

plt.figure(figsize=(10,10)) #setting up the frame size to see the image and we fit the imageinthis frame size.If we have a highresolution laptop ==> we can increase the frame siz
plt.imshow(photo_data)
plt.show()

#import matplotlib.pyplot as plt
#import matplotlib.image as mpimg

#imgplot = plt.imshow(mpimg.imread('animal.png'))
#plt.ion()
#plt.show()
#animal_name = raw_input("What is the name?: ")
#plt.close()


# In[5]:


photo_data.shape


# The shape of the ndarray show that it is a three layered matrix. The first two numbers here are length and width, and the third number (i.e. 3) is for three layers: Red, Green and Blue 1 for each layer.
# 
# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold">
# RGB Color Mapping in the Photo:</p> <br>
# <ul>
# <li><p style="font-family: Arial; font-size:1.75em;color:red; font-style:bold">
# RED pixel indicates Altitude</p>
# <li><p style="font-family: Arial; font-size:1.75em;color:blue; font-style:bold">
# BLUE pixel indicates Aspect
# </p>
# <li><p style="font-family: Arial; font-size:1.75em;color:green; font-style:bold">
# GREEN pixel indicates Slope
# </p>
# </ul>
# <br>
# Like many other visualizations, the colors in each rgb layer mean something.For example, the intensity of the red will be
# an indication of altitude of the geographical data point in the pixel.
# 
# 
# 
# <p style = " color : blue">The higher values denote higher altitude, aspect and slope.</p>
# 
# 

# In[9]:

photo_data.size


# In[22]:

photo_data.min(), photo_data.max()
#its important to check the max and min values because  the eight bit color intensity is, can not be outside of the 0 to 255 range.


# In[11]:

photo_data.mean() #gives the average value of the pixels


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold"><br>
# 
# RGB value for a Pixel on the 150th Row and 250th Column</p>

# In[23]:

photo_data[150,250] #==> give the values of R,G and B


# In[25]:

#We could have also selected one of R or G or B values. at the a particular pixel
photo_data[150,250,1] #==> give the values of G(scond index ==> using value as 1) at that pixel


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold"><br>
# Set a Pixel to All Zeros</p>
# <br/>
# Similarly, we can change individual values of each pixel by assigning specific values to pixels.
# We can set all three layer in a pixel at once by assigning zero globally to that (row,column) pairing. However, setting one pixel to zero is not noticeable.

# In[29]:

#photo_data = misc.imread('./wifire/sd-3layers.jpg')
photo_data[150, 250] = 0 # in this line , We just set all three layers to be zero for te pixel at 150th row and 250th column
#==> setting them to zero means all the 3 values R,G and B are zeros ==> we get black color now at that pixel
plt.figure(figsize=(10,10))
plt.imshow(photo_data)
plt.show()


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold"><br>
# We can also try to change a range of pixels ==> Changing colors in a Range<p/>
# <br/>
# We can also use a range to change the pixel values. As an example, let's set the green layer for rows 200 t0 800 to full intensity.

# In[31]:

#photo_data = misc.imread('./wifire/sd-3layers.jpg')

photo_data[200:800, : ,1] = 255 #i.e '200:800' means rows from 200 to 800, ':' means all the columns, '1' means the second indes i.e green here
plt.figure(figsize=(10,10))
plt.imshow(photo_data)
plt.show()


# In[36]:

#I'll reload the image because we just changed the image,I was to set it back to it's originals.
photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')

photo_data[200:800, :] = 255
plt.figure(figsize=(10,10))
plt.imshow(photo_data)
plt.show()


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold"><br>
# Pick all Pixels with Low Values</p>
# 
# <p style="font-family: Arial; font-size:2em;color:#2462C0; font-style:bold"><br>
# **Below 2 cells code has some good logic and important methods of dealing</p>
# 
# 

# In[38]:

photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')
print("Shape of photo_data:", photo_data.shape)
low_value_filter = photo_data < 200  #select all values that are less than 200.This will create a boolean ndarray of same shape with our original array.
print("Shape of low_value_filter:", low_value_filter.shape)
#Now we can use this new ndarray to filter pixels with low intensity or I can call them points of less interest.
#So how the do we go filtering using this new low value filter array?
#==> we'll now use this array as an index to set those low values to zero.


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold">
# Filtering Out Low Values</p><br/>
# Whenever the low_value_filter is True, set value to 0.

# In[40]:

#import random
plt.figure(figsize=(10,10))
plt.imshow(photo_data)
plt.show()
photo_data[low_value_filter] = 0 #applying filter
plt.figure(figsize=(10,10))
plt.imshow(photo_data)
plt.show() #==> we can see that the low intensity values are removed


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold">
# More Row and Column Operations</p><br>
# You can design complex patters by making cols a function of rows or vice-versa. Here we try a linear relationship between rows and columns.

# In[42]:

rows_range = np.arange(len(photo_data))
cols_range = rows_range
print(len(photo_data))
print(rows_range)
print(type(rows_range))


# In[43]:

photo_data[rows_range, cols_range] = 255
#We are using these two range arrays and setting all the values in those pixels to 255.Let's see our image now.


# In[46]:

plt.figure(figsize=(15,15))
plt.imshow(photo_data)
plt.show()
#We'll see a diagonal line, white line, because those are the values we set going through a virtual square in the left part of the image.
#==> all the pixels at (0,0),(1,1),(2,2).... till (3274,3274) are set to max intensity ==> while colour


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold"><br>
# Masking Images</p>
# <br>Now let us try something even cooler...a mask that is in shape of a circular disc.

# <img src="./1494532821.png" align="left" style="width:550px;height:360px;"/>

# In[50]:

total_rows, total_cols, total_layers = photo_data.shape
#now we'll use the ogrid function to help us vectorize the distance from the center,which will be a function of the two variables.Ogrid returns as an ndarray.
#So what will ogrid return?
#We'll give the range of total rows and range of total columns,and it's going to give us,let's comment this line with the print,it's going to give us two vectors, x and y,
#which will have, the x will have the total number of rows,and y will have the total number of columns.
#So ogrid is a compact method of creating a multidimensional ndarray operationsin single lines.
X, Y = np.ogrid[:total_rows, :total_cols]
print("X = ", X.shape, " and Y = ", Y.shape)


# In[56]:

center_row, center_col = total_rows / 2, total_cols / 2  #total no. of rows/ 2 and total no. of columns/2 gives centre coordinates
#print(X - center_row) #gives the difference of values of X and centre_row for all values of X
#print(Y - center_col)
dist_from_center = (X - center_row)**2 + (Y - center_col)**2
#print(dist_from_center.shape)
#print(dist_from_center)
radius = (total_rows / 2)**2 #doing square of radius since we are not using sq.root while finding dist_from_center in above line
#print("Radius = ", radius)
circular_mask = (dist_from_center > radius) #if distance from center is greater than the radius ==> value falls under circular mask
#print(circular_mask)
#print(circular_mask[1500:1700,2000:2200]) # check the values in this range ==> we see the values as false
#****as circular_mask is a boolean array with same shape as that of dist_from_center.


# In[57]:

#now we can chck our changs
#==> loading the image a fresh
photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')
photo_data[circular_mask] = 0  #making all the layers of photo_data(where circular_mask = true ) as zero (i.e black)
plt.figure(figsize=(10,10))
plt.imshow(photo_data)
plt.show()


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold">
# Further Masking</p>
# <br/>You can further improve the mask, for example just get upper half disc.

# In[58]:

X, Y = np.ogrid[:total_rows, :total_cols]
half_upper = X < center_row # this line generates a mask for all rows above the center

half_upper_mask = np.logical_and(half_upper, circular_mask) #using Logical_and operator of Numpy add both the masks(i.e if both are true then only it willtake)


# In[63]:

#import random
photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')
photo_data[half_upper_mask] = 255
#photo_data[half_upper_mask] = random.randint(200,255) #this will give random values b/w 200 to 255 ==> w wont get perfect white
plt.figure(figsize=(15,15))
plt.imshow(photo_data)
plt.show()


# <p style="font-family: Arial; font-size:2.75em;color:purple; font-style:bold"><br>
# Further Processing of our Satellite Imagery </p>
# 
# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold">
# Processing of RED Pixels</p>
# 
# Remember that red pixels indicate the height. Let us try to highlight all the high altitude areas. We will do this by detecting high intensity RED Pixels and muting down other areas.

# In[66]:

photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')

red_mask   = photo_data[:, : ,0] < 150 #i.e all rows and all columns and '0' is to get red indexes only as Red layer is at zeroth position
#creating a boolean array red_mask of same shape as that of photo_data where all the values of Red which are below are kept as True
photo_data[red_mask] = 0
plt.figure(figsize=(10,10))
plt.imshow(photo_data)


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold"><br>
# Detecting Highl-GREEN Pixels</p>

# In[67]:

photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')
green_mask = photo_data[:, : ,1] < 150

photo_data[green_mask] = 0
plt.figure(figsize=(15,15))
plt.imshow(photo_data)
#lly we can detect blue pixels as well


# <p style="font-family: Arial; font-size:1.75em;color:#2462C0; font-style:bold"><br>
# 
# Composite mask that takes thresholds on all three layers: RED, GREEN, BLUE     
# 
# i.e let's create a composite mask for point with high elevation, high aspect, and low slope</p>

# In[68]:

photo_data = misc.imread('A:/Naveed/DS/micromasters/week3/wifire/sd-3layers.jpg')

red_mask   = photo_data[:, : ,0] < 150
green_mask = photo_data[:, : ,1] > 100
blue_mask  = photo_data[:, : ,2] < 100

final_mask = np.logical_and(red_mask, green_mask, blue_mask)
photo_data[final_mask] = 0
plt.figure(figsize=(15,15))
plt.imshow(photo_data)


# **bold**

# In[ ]:




     
